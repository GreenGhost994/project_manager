import unittest
from api.components.element_location import *
import time
from functools import wraps

def measure_execution_time(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"Execution time of {func.__name__}: {execution_time} seconds")
        return result
    return wrapper
    
class Test_ElementLocation(unittest.TestCase):
    
    data_building = {"buildings":
                            {
                                "HUS1":
                                    {"grid_lines":
                                        {
                                            "1": [[0, 0], [0, 50000]],
                                            "2": [[6000, 0], [6000, 50000]],
                                            "3": [[12000, 0], [12000, 50000]],
                                            "4": [[18000, 0], [18000, 50000]],
                                            "5": [[24000, 0], [24000, 50000]],
                                            "6": [[40000, 0], [40000, 50000]],
                                            "7": [[40005, 0], [40005, 50000]],
                                            "A": [[0, 0], [30000, 0]],
                                            "B": [[0, 6000], [50000, 6000]],
                                            "C": [[0, 12000], [50000, 12000]],
                                            "D": [[0, 18000], [50000, 18000]],
                                            "E": [[0, 20000], [50000, 20000]],
                                            "F": [[0, 30000], [50000, 30000]]
                                        }
                                    },
                                "HUS2":
                                    {"grid_lines":
                                        {
                                            "1": [[0, 0], [0, -50000]],
                                            "2": [[-6000, 0], [-6000, -50000]],
                                            "3": [[-12000, 0], [-12000, -50000]],
                                            "4": [[-18000, 0], [-18000, -50000]],
                                            "5": [[-24000, 0], [-24000, -50000]],
                                            "6": [[-40000, 0], [-40000, -50000]],
                                            "A": [[0, 0], [-30000, 0]],
                                            "B": [[0, -6000], [-30000, -6000]],
                                            "C": [[0, -12000], [-30000, -12000]],
                                            "D": [[0, -18000], [-30000, -18000]],
                                            "E": [[0, -20000], [-30000, -20000]],
                                            "F": [[0, -30000], [-30000, -30000]]
                                        }
                                    }
                            }
                        }
    
    def test_procedure_element1(self):
        data_elemnet = {"elements":
            [
                {"element_name": "C_01", "coords": [6000, 5900, 1500], "rotation": [0], "size": [600, 600, 3000]},
                {"element_name": "C_02", "coords": [11700, 5700, 1500], "rotation": [45], "size": [600, 600, 3000]},
                {"element_name": "C_03", "coords": [18000, 12100, 1500], "rotation": [0], "size": [600, 600, 3000]},
            ]
        }
       
        processed_data = process_data(self.data_building | data_elemnet)
        expected_data = [['C_01', 'HUS1', '2/B'], ['C_02', 'HUS1', '3/B'], ['C_03', 'HUS1', '4/C']]
        self.assertCountEqual([[x[0][0], x[1], x[2][0]] for x in processed_data], expected_data)    
        

    def test_procedure_element2(self):
        data_elemnet = {"elements":
            [
                {"element_name": "W_01", "coords": [6000, 5900, 1500], "rotation": [0], "size": [4300, 200, 2000]},
                {"element_name": "W_02", "coords": [6000, 9900, 1500], "rotation": [0], "size": [4300, 200, 2000]},
                {"element_name": "W_03", "coords": [6000, 5900, 1500], "rotation": [0], "size": [4300, 200, 2000]},
            ]
        }
       
        processed_data = process_data(self.data_building | data_elemnet)
        expected_data = [['W_01', 'HUS1', '2-3/B'], ['W_03', 'HUS1', '2-3/B'], ['W_02', 'HUS1', '2-3/B-C']]
        self.assertCountEqual([[x[0][0], x[1], x[2][0]] for x in processed_data], expected_data)
        

    def test_procedure_element3(self):
        data_elemnet = {"elements":
            [
                {"element_name": "WS_01", "coords": [9000, 5900, 1500], "rotation": [0], "size": [4300, 200, 2000]},
                {"element_name": "WS_02", "coords": [9000, 11900, 1500], "rotation": [0], "size": [4300, 200, 2000]},
                {"element_name": "WS_03", "coords": [6000, 11900, 1500], "rotation": [0], "size": [4300, 200, 2000]},
            ]
        }
       
        processed_data = process_data(self.data_building | data_elemnet)
        expected_data = [['WS_01', 'HUS1', '2-4/B'], ['WS_02', 'HUS1', '2-4/C'], ['WS_03', 'HUS1', '2-3/C']]
        self.assertCountEqual([[x[0][0], x[1], x[2][0]] for x in processed_data], expected_data)
        

    def test_procedure_element_boundary1(self):
        data_elemnet = {"elements":
            [
                {"element_name": "WS_01", "coords": [9000, 5900, 1500], "rotation": [0], "boundary": [[9000, 5600, 1500], [19000, 5600, 1500], [19000, 5900, 1500], [9000, 5900, 1500]]},
            ]
        }

        processed_data = process_data(self.data_building | data_elemnet)
        expected_data = [['WS_01', 'HUS1', '2-5/B']]
        self.assertCountEqual([[x[0][0], x[1], x[2][0]] for x in processed_data], expected_data)
        

    def test_procedure_element_close_axis1(self):
        data_elemnet = {"elements":
            [
                {"element_name": "W_001", "coords": [39900, 5900, 1500], "rotation": [-90], "boundary": [[39905, 5900, 1500], [41005, 5900, 1500], [41005, 8900, 1500], [39905, 8900, 1500]]},
            ]
        }

        processed_data = process_data(self.data_building | data_elemnet)
        expected_data = [['W_001', 'HUS1', '7/B-C']]
        self.assertCountEqual([[x[0][0], x[1], x[2][0]] for x in processed_data], expected_data)        


    def test_procedure_element_not_found(self):
        data_elemnet = {"elements":
            [
                {"element_name": "W_001", "coords": [-39900, 5900, 1500], "rotation": [-90], "boundary": [[-39905, 5900, 1500], [-41005, 5900, 1500], [-41005, 8900, 1500], [-39905, 8900, 1500]]},
                {"element_name": "W_002", "coords": [-39900, 5900, 1500], "rotation": [-90], "boundary": [[-39905, 5900, 1500], [-41005, 5900, 1500], [-41005, 8900, 1500], [-39905, 8900, 1500]]},
            ]
        }

        processed_data = process_data(self.data_building | data_elemnet)
        expected_data = [['W_001', 'Not found', 'Not found'], ['W_002', 'Not found', 'Not found']]

        self.assertCountEqual([[x[0][0], x[1], x[2][0]] for x in processed_data], expected_data)

        
    @measure_execution_time
    def test_procedure_element_huge_grid(self):
        data_building ={"buildings":
            {
                "2T":
                    {"grid_lines":
                        {
                            "1prim": [[-9242.15653189, -69599.84843498], [-9242.15653189, 17700.15156502]],
                            "1": [[-8692.15653189, -70199.84843498], [-8692.15653189, 18300.15156502]],
                            "2": [[-5692.15653189, 18300.15156502], [-5692.15653189, -70199.84843498]],
                            "3": [[-2692.15653189, -70199.84843498], [-2692.15653189, 18300.15156502]],
                            "4": [[307.84346811, 18300.15156502], [307.84346811, -70199.84843498]],
                            "5": [[3307.84346811, -70199.84843498], [3307.84346811, 18300.15156502]],
                            "6": [[6307.84346811, 18300.15156502], [6307.84346811, -70199.84843498]],
                            "7": [[9307.84346811, -69599.84843498], [9307.84346811, 17700.15156502]],
                            "7prim": [[9807.84346811, 18300.15156502], [9807.84346811, -70199.84843498]],
                            "8": [[15807.84346811, -70199.84843498], [15807.84346811, 18300.15156502]],
                            "9": [[21807.84346811, 18300.15156502], [21807.84346811, -70199.84843498]],
                            "9prim": [[27807.84346811, 17700.15156502], [27807.84346811, -69599.84843498]],
                            "10": [[28305.01545904, -70199.85643268], [28305.01545904, 18300.15956272]],
                            "11": [[34307.84346811, 17700.15156502], [34307.84346811, -69599.84843498]],
                            "11prim": [[34807.84346811, -70199.84843498], [34807.84346811, 18300.15156502]],
                            "12": [[40807.84346811, -70199.84843498], [40807.84346811, 18300.15156502]],
                            "13": [[46807.84346811, 18300.15156502], [46807.84346811, -70199.84843498]],
                            "14prim": [[52807.84346811, -69599.84843498], [52807.84346811, 17700.15156502]],
                            "15": [[53457.84346811, 18300.15156502], [53457.84346811, -70199.84843498]],
                            "16": [[55457.84346811, -70199.84843498], [55457.84346811, 18300.15156502]],
                            "17": [[57447.09466544, 18300.26711513], [57457.78308165, -70199.84843863]],
                            "18": [[59457.84346811, -70199.84843498], [59457.84346811, 18300.15156502]],
                            "19": [[61457.84346811, 17700.15156502], [61457.84346811, -69599.84843498]],
                            "19prim": [[62107.84346811, -70199.84843498], [62107.84346811, 18300.15156502]],
                            "Aprim": [[-14242.15653189, -29249.84843498], [67107.84346811, -29249.84843498]],
                            "A": [[-13642.15653189, -28699.84643635], [11707.84346812, -28699.84843498]],
                            "B": [[67107.84346811, -25699.84843498], [-14242.15653189, -25699.84843498]],
                            "C": [[-14242.15653189, -22699.84843498], [67107.84346811, -22699.84843498]],
                            "D": [[-14242.15653189, -19699.84843498], [12307.84346811, -19699.84843498]],
                            "E": [[-14242.15653189, -16699.84843498], [67107.84346811, -16699.84843498]],
                            "F": [[-14242.15653189, -13699.84843498], [12307.84346811, -13699.84843498]],
                            "G": [[-14242.15653189, -10699.84843498], [67107.84346811, -10699.84843498]],
                            "H": [[-14242.15653189, -7699.84843498], [12307.84346811, -7699.84843498]],
                            "I": [[-14242.15653189, -4699.84843498], [67107.84346811, -4699.84843498]],
                            "Iprim": [[-13642.15653189, -4199.84843498], [11707.84346812, -4199.85043361]],
                            "K": [[67107.84346811, 1300.15156502], [-14242.15653189, 1300.15156502]],
                            "L": [[-14242.15653189, 4300.15156502], [67107.84346811, 4300.15156502]],
                            "M": [[67107.84346811, 7300.15156502], [-14242.15653189, 7300.15156502]],
                            "N": [[-14242.15653189, 10300.15156502], [67107.84346811, 10300.15156502]],
                            "O": [[-14242.15653189, 13300.15156502], [67107.84346811, 13300.15156502]]
                        }
                    }
            }
            }

        data_elemnet = {"elements":
            [
                {"element_name": "B_123", "coords": [4307, -11699, 1500], "rotation": [-90], "boundary": [[4307, -12699, 1500], [4307, -12499, 1500], [4507, -12499, 1500], [4507, -12699, 1500]]},
                {"element_name": "B_124", "coords": [4307, -11699, 1500], "rotation": [-90], "boundary": [[4307, -12699, 1500], [4307, -12499, 1500], [4507, -12499, 1500], [4507, -12699, 1500]]},
                {"element_name": "B_125", "coords": [4307, -11699, 1500], "rotation": [-90], "boundary": [[52307, -12699, 1500], [52307, -12499, 1500], [52507, -12499, 1500], [52507, -12699, 1500]]},
                {"element_name": "B_126", "coords": [4307, -11699, 1500], "rotation": [-90], "boundary": [[53307, -12699, 1500], [53307, -12499, 1500], [53507, -12499, 1500], [53507, -12699, 1500]]},
            ]
        }

        processed_data = process_data(data_building | data_elemnet)
        expected_data = [['B_123', '2T', '5-6/F-G'], ['B_124', '2T', '5-6/F-G'], ['B_125', '2T', '14prim/E-G'], ['B_126', '2T', '15/E-G']]

        self.assertCountEqual([[x[0][0], x[1], x[2][0]] for x in processed_data], expected_data)

